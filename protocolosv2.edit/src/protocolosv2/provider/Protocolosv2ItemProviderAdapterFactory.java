/**
 */
package protocolosv2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import protocolosv2.util.Protocolosv2AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Protocolosv2ItemProviderAdapterFactory extends Protocolosv2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Protocolosv2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Numeric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericItemProvider numericItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Numeric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericAdapter() {
		if (numericItemProvider == null) {
			numericItemProvider = new NumericItemProvider(this);
		}

		return numericItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.YesOrNo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YesOrNoItemProvider yesOrNoItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.YesOrNo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYesOrNoAdapter() {
		if (yesOrNoItemProvider == null) {
			yesOrNoItemProvider = new YesOrNoItemProvider(this);
		}

		return yesOrNoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.AuxiliaryConduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuxiliaryConductItemProvider auxiliaryConductItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.AuxiliaryConduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuxiliaryConductAdapter() {
		if (auxiliaryConductItemProvider == null) {
			auxiliaryConductItemProvider = new AuxiliaryConductItemProvider(this);
		}

		return auxiliaryConductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Question} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionItemProvider questionItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Question}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionAdapter() {
		if (questionItemProvider == null) {
			questionItemProvider = new QuestionItemProvider(this);
		}

		return questionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter() {
		if (protocolItemProvider == null) {
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Prescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrescriptionItemProvider prescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Prescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrescriptionAdapter() {
		if (prescriptionItemProvider == null) {
			prescriptionItemProvider = new PrescriptionItemProvider(this);
		}

		return prescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Discharge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DischargeItemProvider dischargeItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Discharge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDischargeAdapter() {
		if (dischargeItemProvider == null) {
			dischargeItemProvider = new DischargeItemProvider(this);
		}

		return dischargeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Referral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferralItemProvider referralItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Referral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferralAdapter() {
		if (referralItemProvider == null) {
			referralItemProvider = new ReferralItemProvider(this);
		}

		return referralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Treatment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreatmentItemProvider treatmentItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Treatment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreatmentAdapter() {
		if (treatmentItemProvider == null) {
			treatmentItemProvider = new TreatmentItemProvider(this);
		}

		return treatmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Information} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationItemProvider informationItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Information}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationAdapter() {
		if (informationItemProvider == null) {
			informationItemProvider = new InformationItemProvider(this);
		}

		return informationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Examination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExaminationItemProvider examinationItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Examination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExaminationAdapter() {
		if (examinationItemProvider == null) {
			examinationItemProvider = new ExaminationItemProvider(this);
		}

		return examinationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Medication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MedicationItemProvider medicationItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Medication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMedicationAdapter() {
		if (medicationItemProvider == null) {
			medicationItemProvider = new MedicationItemProvider(this);
		}

		return medicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Procedure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcedureItemProvider procedureItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Procedure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcedureAdapter() {
		if (procedureItemProvider == null) {
			procedureItemProvider = new ProcedureItemProvider(this);
		}

		return procedureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link protocolosv2.Admission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdmissionItemProvider admissionItemProvider;

	/**
	 * This creates an adapter for a {@link protocolosv2.Admission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdmissionAdapter() {
		if (admissionItemProvider == null) {
			admissionItemProvider = new AdmissionItemProvider(this);
		}

		return admissionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (numericItemProvider != null) numericItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (yesOrNoItemProvider != null) yesOrNoItemProvider.dispose();
		if (auxiliaryConductItemProvider != null) auxiliaryConductItemProvider.dispose();
		if (questionItemProvider != null) questionItemProvider.dispose();
		if (protocolItemProvider != null) protocolItemProvider.dispose();
		if (prescriptionItemProvider != null) prescriptionItemProvider.dispose();
		if (dischargeItemProvider != null) dischargeItemProvider.dispose();
		if (referralItemProvider != null) referralItemProvider.dispose();
		if (treatmentItemProvider != null) treatmentItemProvider.dispose();
		if (informationItemProvider != null) informationItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (examinationItemProvider != null) examinationItemProvider.dispose();
		if (medicationItemProvider != null) medicationItemProvider.dispose();
		if (procedureItemProvider != null) procedureItemProvider.dispose();
		if (admissionItemProvider != null) admissionItemProvider.dispose();
	}

}
